Crasm 1.8:                         Intclock                                                                          page  1

                         1          NAM Intclock
                         2          PAGE 66,132
                         3  
                         4  ;      Interrupt-Driven Clock Example
                         5  
                         6  ; This program implements an interrupt-driven clock program. It uses
                         7  ; the NMI interrupt connected to the LINE signal to count time. This
                         8  ; makes it much more accurate than a timing delay loop (like Example
                         9  ; 6), as the line frequency is very accurate over long periods of
                        10  ; time. In order for this to work you need to connect a jumper wire
                        11  ; from the LINE signal to the NMI* signal. The causes an interrupt to
                        12  ; occur every 60th of a second. Note that we could use the 1Hz signal,
                        13  ; but it is driven by an RC oscillator which is not very stable or
                        14  ; accurate.
                        15  
                        16  ; Run the program from address START. It will first wait for you to
                        17  ; enter the current hours and minutes (as two digit numbers). Then the
                        18  ; time will be displayed. Don't connect the jumper wire until you have
                        19  ; entered the program. You can start (or restart) the program at entry
                        20  ; point LOOP if you want to use the current time values and not prompt
                        21  ; the user for the time.
                        22  
                        23  ; Written by Jeff Tranter <tranter@pobox.com>
                        24  
                        25          CPU 6800
                        26  
                        27  ; Monitor routines
                        28  
  FCBC                  29          REDIS   EQU $FCBC
  FD7B                  30          DSPLAY  EQU $FD7B
  FE09                  31          IHB     EQU $FE09
                        32  
                        33  ; Set this to one this if you want a 24-hour clock (0-24 hours).
                        34  ; Leave it set to zero for 12-hour time (1-12).
  0000                  35          TWENTYFOURHOUR = 0
                        36  
  0000                  37          * = $0000
                        38  
0000 00                 39  HOUR    DS      1       ; Hour (1-12) in BCD (0-23 in 24-hour mode)
0001 00                 40  MINUTE  DS      1       ; Minute (0-59) in BCD
0002 00                 41  SECOND  DS      1       ; Second (0-59) in BCD
0003 00                 42  JIFFY   DS      1       ; 60ths of a second (in BCD)
                        43  
                        44  ; Main program. Simply displays the hours, minutes and seconds that
                        45  ; are updated by the interrupt handler routine.
                        46  
0004 BDFCBC             47  START   JSR    REDIS   ; Reset display address
0007 BDFE09             48          JSR    IHB     ; Get hours from user (assume it is in range)
000A 9700               49          STAA   HOUR    ; Save it
000C BDFE09             50          JSR    IHB     ; Get minutes from user (assume it is in range)
000F 9701               51          STAA   MINUTE  ; Save it
0011 7F0002             52          CLR    SECOND  ; Set seconds to zero
0014 BDFCBC             53  LOOP    JSR    REDIS   ; Reset display address
0017 C603               54          LDAB   #3      ; Number of bytes to display
0019 CE0000             55          LDX    #HOUR   ; Address of bytes to output
001C 9602               56          LDAA   SECOND  ; Get current seconds
001E 36                 57          PSHA           ; Save it on stack
001F BDFD7B             58          JSR    DSPLAY  ; Display time
0022 32                 59          PULA           ; Restore seconds
                        60  
                        61  ; Wait for seconds to change before updating display again.
                        62  


Crasm 1.8:                         Intclock                                                                          page  2

0023 9102               63  WAIT    CMPA   SECOND  ; Did seconds change from last value?
0025 27FC               64          BEQ    WAIT    ; If not, keep waiting
0027 20EB               65          BRA    LOOP    ; Repeat forever
                        66  
                        67  ; NMI Interrupt handler routine. Called 60 times per second. It
                        68  ; increments the jiffies, seconds, minutes, and hours, clearing and
                        69  ; rolling over as needed.
                        70  
0029 9603               71  INT     LDAA    JIFFY   ; Get 60ths of a second
002B 8B01               72          ADDA    #1      ; Add one
002D 19                 73          DAA             ; Convert to BCD
002E 9703               74          STAA    JIFFY   ; Save it
0030 8160               75          CMPA    #$60    ; Did we reach 60?
0032 2D2E               76          BLT     RET     ; No, then done
0034 7F0003             77          CLR     JIFFY   ; Set jiffies to zero
0037 9602               78          LDAA    SECOND  ; Get Seconds
0039 8B01               79          ADDA    #1      ; Add one
003B 19                 80          DAA             ; Convert to BCD
003C 9702               81          STAA    SECOND  ; Save it
003E 8160               82          CMPA    #$60    ; Did we reach 60?
0040 2D20               83          BLT     RET     ; No, then done
0042 7F0002             84          CLR     SECOND  ; Set seconds to zero
0045 9601               85          LDAA    MINUTE  ; Get minutes
0047 8B01               86          ADDA    #1      ; Add one
0049 19                 87          DAA             ; Convert to BCD
004A 9701               88          STAA    MINUTE  ; Save it
004C 8160               89          CMPA    #$60    ; Did we reach 60?
004E 2D12               90          BLT     RET     ; No, then done
0050 7F0001             91          CLR     MINUTE  ; Set minutes to zero
0053 9600               92          LDAA    HOUR    ; Get hours
0055 8B01               93          ADDA    #1      ; Add one
0057 19                 94          DAA             ; Convert to BCD
0058 9700               95          STAA    HOUR    ; Save it
                        96          if TWENTYFOURHOUR
                         C          CMPA    #$24    ; Did we reach 24?
                        98          else
005A 8113               99          CMPA    #$13    ; Did we reach 13?
                       100          endc
005C 2D04              101          BLT     RET     ; No, then done
                       102          if TWENTYFOURHOUR
                         C          LDAA    #0      ; Reset hour to 0
                       104          else
005E 8601              105          LDAA    #1      ; Reset hour to 1
                       106          endc
0060 9700              107          STAA    HOUR    ; Save it
0062 3B                108  RET     RTI             ; Return from interrupt
                       109  
                       110  ; Note that in the Monitor ROM the NMI vector at $FFFC,D points to
                       111  ; $00FD, which is in RAM. We add a jump there to the interrupt
                       112  ; handler.
                       113  
  00FD                 114          * = $00FD       ; Address of NMI handler
00FD 7E0029            115          JMP INT         ; Call interrupt handler
                       116  

ERRORS:       0
WARNINGS:     0

Successful assembly...
 Last address       ff (255)
 Code length        cc (204)



Crasm 1.8:                         Intclock                                                                          page  3

 FD7B   Abs DSPLAY                                            0000   Abs HOUR                                             
 FE09   Abs IHB                                               0029   Abs INT                                              
 0003   Abs JIFFY                                             0014   Abs LOOP                                             
 0001   Abs MINUTE                                            FCBC   Abs REDIS                                            
^0062   Abs RET                                               0002   Abs SECOND                                           
?0004   Abs START                                             0000   Abs TWENTYFOURHOUR                                   
 0023   Abs WAIT                                             

























































